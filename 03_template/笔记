
问题：Could not fetch URL https://pypi.org/simple/xlsxwriter/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/xlsxwriter/ (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1056)'))) - skipping

pip的版本和SSL的认证支持有问题，大概的问题是 要想用pip先要支持ssl，但是支持ssl要先更新pip，所以是个矛盾问题， 一键解决方案：更新pip
curl https://bootstrap.pypa.io/get-pip.py | python3
python -m pip install xlsxwriter  --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org

定义宏，复用代码
模板继承：父模板，子模版继承扩展。包含

数据库操作
flask-sqlalchemy是一个简化了SQLAlchemy操作的flask扩展
数据库的安装
安装服务端：sudo apt-get install mysql-server
安装服务端：sudo apt-getinstall mysql-client
sudo apt-get install libmysqlclient-dev
登录数据库 mysql -u root -pcheng1130
创建数据库，并设定编码
create database <数据库名> charset=utf8
显示所有数据库 show databases;
安装flask-sqlalchemy扩展：
pip install flask-sqlalchemy
连接数据库安装的flask-mysqldb
pip install flask-mysqldb
flask中数据库设置;
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:cheng1130@127.0.0.1:3306/testdb'
>>> from db_demo import *

# 查询
>>> Role.query.all()                # flask-sqlalchemy提供的
[Role object: name=admin, Role object: name=stuff]

>>> db.session.query(Role).all()        # SQLAlchemy框架提供的最原始的，get和first可以用
[Role object: name=admin, Role object: name=stuff]

>>> li = Role.query.all()
>>> li
[Role object: name=admin, Role object: name=stuff]
>>> r = li[0]
>>> type(r)
<class 'db_demo.Role'>
>>> r.name
'admin'
>>> Role.query.first()
Role object: name=admin
>>> r = Role.query.first()
>>> r.name
'admin'
>>> r = Role.query.get(2)   # get的是主键的id获取对象
>>> r
Role object: name=stuff
>>> r.name
'stuff'

# 过滤

>>> User.query.filter_by(name="Tom")
<flask_sqlalchemy.BaseQuery object at 0x000002E964F42470>       # 只是一个查询，未取
>>> User.query.filter_by(name="Tom").all()
[User object: name=Tom]
>>> User.query.filter_by(name="Tom").first()
User object: name=Tom
>>> user = User.query.filter_by(name="Tom").first()
>>> user.name
'Tom'
>>> user.email
'Tom@163.com'
>>> User.query.filter_by(name="Tom", role_id=1).first() # 严格匹配，里面的过滤条件以and连接的
User object: name=Tom
>>> User.query.filter_by(name="Tom", role_id=2).first() # 没符合的输出空
>>> user = User.query.filter_by(name="Tom", role_id=2).first()
>>> type(user)
<class 'NoneType'>


>>> user = User.query.filter(User.name=="Tom", User.role_id==1).first()
>>> user
User object: name=Tom
>>> user.name
'Tom'

from sqlalchemy import or_   # 使用模糊匹配的导入模块
>>> User.query.filter(or_(User.name=="Tom", User.email.endswith("163.com"))).all()
[User object: name=Tom, User object: name=Jim]
>>> li = User.query.filter(or_(User.name=="Tom", User.email.endswith("163.com"))).all()
>>> li[0].name
'Tom'
>>> li[1].name
'Jim'
#                     偏移（跳过）  取几个
>>> User.query.filter().offset().limit().order_by().all()

>>> User.query.offset(2).all()
[User object: name=Lucy, User object: name=Grist]
>>> li = User.query.offset(2).all()
>>> li[0].name
'Lucy'
>>> li[1].name
'Grist'

>>> li = User.query.offset(1).limit(2).all()
>>> li
[User object: name=Jim, User object: name=Lucy]
>>> li[1]
User object: name=Lucy
>>> li[1].name
'Lucy'

>>> li = User.query.offset(1).limit(2)
>>> li
<flask_sqlalchemy.BaseQuery object at 0x000002E963D164E0>
>>> li[0]
User object: name=Jim
>>> li[1]
User object: name=Lucy

# 排序
#  官方的
>>> li = User.query.order_by(User.id.desc()).all()
>>> li
[User object: name=Grist, User object: name=Lucy, User object: name=Jim, User object: name=Tom]
>>> li[0]
User object: name=Grist
>>> li[0].name
'Grist'

# 第二种
>>> User.query.order_by("-id").all()  # 倒序排
[User object: name=Grist, User object: name=Lucy, User object: name=Jim, User object: name=Tom]

#分组
db.session.query(User.role_id, func.count(User.role_id)).group_by(User.role_id)
# 求和函数
from sqlalchemy import func
>>> db.session.query(User.role_id, func.count(User.role_id)).group_by(User.role_id)
<flask_sqlalchemy.BaseQuery object at 0x000002E964F42278>
>>> db.session.query(User.role_id, func.count(User.role_id)).group_by(User.role_id).all()
[(1, 2), (2, 2)]


# 关联查询

# 角色为一的关联到用户
>>> ro = Role.query.get(1)
>>> type(ro)
<class 'db_demo.Role'>
>>> ro.users
[User object: name=Tom, User object: name=Grist]
>>> ro.users[0].name
'Tom'

# 用户查询角色
>>> user = User.query.get(1)
>>> user
User object: name=Tom


>>> user.role_id
1
>>> Role.query.get(user.role_id)
Role object: name=admin
# 反向引用的作用
>>> user.role
Role object: name=admin
>>> user.role.name
'admin'



# 更新操作
>>> User.query.get(1)
User object: name=Tom
>>> user = User.query.get(1)
>>> user.name
'Tom'
>>> user.name = "Tome"
>>> db.session.add(user)  # 修改过的放会话
>>> db.session.commit()     # 提交

# 另一种更新，过滤的同时更新
>>> User.query.filter_by(name="Grist").update({"name": "Grizy","email":"1091291085@qq.com"})
1
>>> db.session.commit()


# 删除操作
# 删除id=3的用户
>>> user = User.query.get(3)
>>> db.session.delete(user)
>>> db.session.commit()



数据库迁移
Flask数据库迁移框架  flask-migrate(先安装Flask-Script[它有个manager类可以启动管理app]中，集成到flask-Script)
初始化db:>python manager_author_book.py db init
会产生一个migration文件夹，
生成的迁移文件>python manager_author_book.py db migrate -m 'add eamil'
更新到数据库>python manager_author_book.py db upgrade
查看做过的历史记录：python manager_author_book.py db history
撤回操作（回退到某个状态）：python manager_author_book.py db downgrade 版本号


Flask-Mail 通过python内置的smtplib包，可以用在Flask程序中发送邮件
Flask-Mail连接到简单邮件协议（Simple Mail Transfer Protocol,SMTP）服务器，并把邮件交给服务器发送